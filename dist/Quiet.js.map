{"version":3,"file":"Quiet.js","mappings":"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","sources":["webpack://Quiet/webpack/universalModuleDefinition","webpack://Quiet/webpack/bootstrap","webpack://Quiet/webpack/runtime/define property getters","webpack://Quiet/webpack/runtime/hasOwnProperty shorthand","webpack://Quiet/webpack/runtime/make namespace object","webpack://Quiet/./src/Module.ts","webpack://Quiet/./src/util.ts","webpack://Quiet/./src/Receiver.ts","webpack://Quiet/./src/Transmitter.ts","webpack://Quiet/./src/Quiet.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Quiet\"] = factory();\n\telse\n\t\troot[\"Quiet\"] = factory();\n})(self, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {Quiet} from \"./Quiet\";\n\nexport const Module:any = {\n    onRuntimeInitialized: function(){\n        console.log(\"onRuntimeInitialized\", ...arguments)\n    },\n    locateFile: function(filename: string, emPathFolder?: string){\n        // https://yunxin-g2-assets.oss-cn-hangzhou.aliyuncs.com\n        console.log(\"locateFile\", filename, ...arguments)\n        if (!emPathFolder){\n            emPathFolder = \"https://yunxin-g2-assets.oss-cn-hangzhou.aliyuncs.com/quiet-webrtc/\"\n        }\n        return emPathFolder + filename\n    }\n};\n\n(window as any).Module = Module\n","\n/**\n * Convert an array buffer in UTF8 to string\n * @function ab2str\n * @memberof Quiet\n * @param {ArrayBuffer} ab - array buffer to be converted\n * @returns {string} s - converted string\n */\n\nlet textEncoder: TextEncoder|null = null;\nlet textDecoder: TextDecoder|null = null;\n\nexport function ab2str(ab: ArrayBuffer) {\n    if (!textDecoder){\n        textDecoder = new TextDecoder()\n    }\n    return textDecoder.decode(ab)\n}\n\nexport function str2ab(str: string) {\n    if (!textEncoder){\n        textEncoder = new TextEncoder()\n    }\n    return textEncoder.encode(str)\n}\n\nexport function mergeab(ab1:ArrayBuffer, ab2:ArrayBuffer) {\n    var tmp = new Uint8Array(ab1.byteLength + ab2.byteLength);\n    tmp.set(new Uint8Array(ab1), 0);\n    tmp.set(new Uint8Array(ab2), ab1.byteLength);\n    return tmp.buffer;\n}\n","import {FrameStats, QuietProfile, ReceiverOptions} from \"./interfaces\";\nimport {Quiet} from \"./Quiet\";\nimport {Module} from \"./Module\";\n\nexport class Receiver{\n    profile: QuietProfile;\n    c_profiles: number[];\n    c_profile: number[];\n    opts: ReceiverOptions;\n    opt: ReceiverOptions;\n\n    audioStream: MediaStream;\n    audioInput: AudioNode;\n    private quiet: Quiet;\n    inited: boolean = false;\n    private samples: number = 0;\n    private frame: any;\n    private lastChecksumFailCount: number = 0;\n    private last_consume_times: number[] = [];\n    private num_consume_times: number = 0;\n    private scriptProcessor: ScriptProcessorNode;\n    private sample_view: Float32Array = new Float32Array();\n    private audioDestination: MediaStreamAudioDestinationNode;\n    private idx: number = 0;\n    private decoder: any;\n\n    constructor(opts: ReceiverOptions) {\n        this.quiet = opts.quiet\n        this.profile = opts.profile;\n\n        this.c_profiles = Module.intArrayFromString(JSON.stringify({\"profile\": this.profile}));\n        this.c_profile = Module.intArrayFromString(\"profile\");\n\n        this.opts = opts\n        this.opt = Module.ccall('quiet_decoder_profile_str', 'pointer', ['array', 'array'], [this.c_profiles, this.c_profile]);\n        // inform quiet about our local sound card's sample rate so that it can resample to its internal sample rate\n        this.decoder = Module.ccall('quiet_decoder_create', 'pointer', ['pointer', 'number'], [this.opt, this.quiet.audioCtx.sampleRate]);\n\n        this.audioStream = opts.audioStream\n        this.audioInput = this.quiet.audioCtx.createMediaStreamSource(this.audioStream)\n        this.audioDestination = this.quiet.audioCtx.createMediaStreamDestination()\n\n        this.scriptProcessor = this.initScriptProcessor()\n\n        this.audioInput.connect(this.scriptProcessor);\n        this.scriptProcessor.connect(this.audioDestination)\n\n        this.init()\n\n    }\n\n    init(){\n\n        Module.ccall('free', null, ['pointer'], [this.opt]);\n\n        this.samples = Module.ccall('malloc', 'pointer', ['number'], [4 * this.quiet.sampleBufferSize]);\n\n        this.frame = Module.ccall('malloc', 'pointer', ['number'], [this.quiet.frameBufferSize]);\n\n        if (this.opts.onReceiverStatsUpdate !== undefined) {\n            Module.ccall('quiet_decoder_enable_stats', null, ['pointer'], [this.decoder]);\n        }\n\n        // 代替destroyed\n        this.inited = true;\n\n        this.lastChecksumFailCount = 0;\n        this.last_consume_times = [];\n        this.num_consume_times = 3;\n\n    }\n\n    readbuf() {\n        if (!this.inited) {\n            return;\n        }\n        while (true) {\n            var read = Module.ccall('quiet_decoder_recv', 'number', ['pointer', 'pointer', 'number'], [this.decoder, this.frame, this.quiet.frameBufferSize]);\n            if (read === -1) {\n                break;\n            }\n            // convert from emscripten bytes to js string. more pointer arithmetic.\n            const frameArray = Module.HEAP8.slice(this.frame, this.frame + read);\n            this.opts.onReceive(frameArray.buffer);\n        }\n    }\n\n    consume() {\n        if (!this.inited) {\n            return;\n        }\n        const before = Date.now();\n        Module.ccall('quiet_decoder_consume', 'number', ['pointer', 'pointer', 'number'], [this.decoder, this.samples, this.quiet.sampleBufferSize]);\n        const after = Date.now();\n\n        this.last_consume_times.unshift(after - before);\n        if (this.last_consume_times.length > this.num_consume_times) {\n            this.last_consume_times.pop();\n        }\n\n        window.setTimeout(()=>{\n            this.readbuf()\n        }, 0);\n\n        const currentChecksumFailCount = Module.ccall('quiet_decoder_checksum_fails', 'number', ['pointer'], [this.decoder]);\n\n        setTimeout(()=>{\n            if (currentChecksumFailCount > this.lastChecksumFailCount){\n                this.lastChecksumFailCount = currentChecksumFailCount;\n                if (this.opts.onReceiveFail) {\n                    this.opts.onReceiveFail(currentChecksumFailCount);\n                }else{\n                    console.error(\"onReceiveFail\", currentChecksumFailCount);\n                }\n            }\n        }, 0)\n\n        if (this.opts.onReceiverStatsUpdate) {\n\n            var num_frames_ptr = Module.ccall('malloc', 'pointer', ['number'], [4]);\n            var frames = Module.ccall('quiet_decoder_consume_stats', 'pointer', ['pointer', 'pointer'], [this.decoder, num_frames_ptr]);\n            // time for some more pointer arithmetic\n            var num_frames = Module.HEAPU32[num_frames_ptr/4];\n            Module.ccall('free', null, ['pointer'], [num_frames_ptr]);\n\n            var framesize = 4 + 4 + 4 + 4 + 4;\n            var stats = [];\n\n            for (var i = 0; i < num_frames; i++) {\n                var frame = (frames + i*framesize)/4;\n                var symbols = Module.HEAPU32[frame];\n                var num_symbols = Module.HEAPU32[frame + 1];\n                const frameStats:FrameStats = {\n                    errorVectorMagnitude: Module.HEAPF32[frame + 2],\n                    receivedSignalStrengthIndicator: Module.HEAPF32[frame + 3],\n                    symbols: [],\n                }\n\n                for (var j = 0; j < num_symbols; j++) {\n                    var symbol = (symbols + 8*j)/4;\n                    frameStats.symbols.push({\n                        real: Module.HEAPF32[symbol],\n                        imag: Module.HEAPF32[symbol + 1]\n                    });\n                }\n                stats.push(frameStats);\n            }\n            this.opts.onReceiverStatsUpdate(stats);\n        }\n    }\n\n    initScriptProcessor(){\n        if (this.inited){\n            throw new Error(\"Not inited\")\n        }\n        // TODO investigate if this still needs to be placed on window.\n        // seems this was done to keep it from being collected\n        const scriptProcessor = this.quiet.audioCtx.createScriptProcessor(this.quiet.sampleBufferSize, 2, 1);\n        this.idx = this.quiet.receivers_idx;\n        this.quiet.receivers[this.idx] = this.scriptProcessor;\n        this.quiet.receivers_idx++;\n\n        scriptProcessor.onaudioprocess = (e:AudioProcessingEvent) => {\n            if (!this.inited) {\n                return;\n            }\n            var input = e.inputBuffer.getChannelData(0);\n            this.sample_view = Module.HEAPF32.subarray(this.samples/4, this.samples/4 + this.quiet.sampleBufferSize);\n            this.sample_view.set(input);\n\n            window.setTimeout(()=>{\n                this.consume()\n            }, 0);\n        }\n        return scriptProcessor;\n    }\n\n    destroy(){\n        if (!this.inited) {\n            return;\n        }\n        this.scriptProcessor.disconnect();\n        Module.ccall('free', null, ['pointer'], [this.samples]);\n        Module.ccall('free', null, ['pointer'], [this.frame]);\n        // 不要释放decoder\n        // Module.ccall('quiet_decoder_destroy', null, ['pointer'], [this.quiet.decoder]);\n        delete this.quiet.receivers[this.idx];\n        this.inited = false;\n    }\n\n    getAverageDecodeTime () {\n        if (this.last_consume_times.length === 0) {\n            return 0;\n        }\n        var total = 0;\n        for (var i = 0; i < this.last_consume_times.length; i++) {\n            total += this.last_consume_times[i];\n        }\n        return total/(this.last_consume_times.length);\n    };\n}\n","import {QuietProfile, TransmitterOptions} from \"./interfaces\";\nimport {Module} from \"./Module\";\nimport {Quiet} from \"./Quiet\";\nimport {str2ab} from \"./util\";\n\nexport class Transmitter{\n    profileObj: QuietProfile\n    done: ()=>void\n    clampFrame: boolean\n\n    opt: string;\n\n    c_profiles: number[];\n    c_profile: number[];\n    private encoder: any;\n    private quiet: Quiet;\n\n    running: boolean = false\n\n    inited: boolean = true\n    private played: Boolean = true;\n    private sample_view: Float32Array;\n    private payload: ArrayBuffer[] = [];\n    private opts: TransmitterOptions;\n    private samples: number = 0;\n    private last_emit_times: number[] = [];\n    private num_emit_times: number = 3;\n    private empties_written: number = 0;\n    private scriptNode: ScriptProcessorNode;\n    private mediaStreamDestination: MediaStreamAudioDestinationNode;\n    private dummy_osc: OscillatorNode;\n    private frame_len: number;\n    private stream: MediaStream;\n\n    constructor(opts: TransmitterOptions) {\n        this.opts = opts\n        this.profileObj = opts.profile\n        this.quiet = opts.quiet\n        this.clampFrame = opts.clampFrame\n\n        this.c_profiles = Module.intArrayFromString(JSON.stringify({\"profile\": this.profileObj}));\n        this.c_profile = Module.intArrayFromString(\"profile\");\n\n        this.done = opts.onFinish\n\n        this.opt = Module.ccall('quiet_encoder_profile_str', 'pointer', ['array', 'array'], [this.c_profiles, this.c_profile]);\n\n        // libquiet internally works at 44.1kHz but the local sound card\n        // may be a different rate. we inform quiet about that here\n        this.encoder = Module.ccall('quiet_encoder_create', 'pointer', ['pointer', 'number'], [this.opt, this.quiet.audioCtx.sampleRate]);\n\n        Module.ccall('free', null, ['pointer'], [this.opt]);\n\n        this.frame_len = 0;\n        if (this.clampFrame) {\n            // enable close_frame which prevents data frames from overlapping multiple\n            // sample buffers. this is very convenient if our system is not fast enough\n            // to feed the sound card without any gaps between subsequent buffers due\n            // to e.g. gc pause. inform quiet about our sample buffer size here\n            this.frame_len = Module.ccall('quiet_encoder_clamp_frame_len', 'number', ['pointer', 'number'], [this.encoder, this.quiet.sampleBufferSize]);\n        } else {\n            this.frame_len = Module.ccall('quiet_encoder_get_frame_len', 'number', ['pointer'], [this.encoder]);\n        }\n        this.samples = Module.ccall('malloc', 'pointer', ['number'], [4 * this.quiet.sampleBufferSize]);\n\n        // yes, this is pointer arithmetic, in javascript :)\n        this.sample_view = Module.HEAPF32.subarray((this.samples/4), (this.samples/4) + this.quiet.sampleBufferSize);\n\n        //搬运自startTransmitter\n        const onaudioprocess = (e:AudioProcessingEvent) => {\n            const output_l = e.outputBuffer.getChannelData(0);\n\n            if (this.played) {\n                // we've already played what's in sample_view, and it hasn't been\n                //   rewritten for whatever reason, so just play out silence\n                for (let i = 0; i < this.quiet.sampleBufferSize; i++) {\n                    output_l[i] = 0;\n                }\n                return;\n            }\n\n            this.played = true;\n\n            output_l.set(this.sample_view);\n        }\n\n        // we want a single input because some implementations will not run a node without some kind of source\n        // we want two outputs so that we can explicitly silence the right channel and no mixing will occur\n        this.scriptNode = this.quiet.audioCtx.createScriptProcessor(this.quiet.sampleBufferSize, 1, 2)\n        this.scriptNode.onaudioprocess = onaudioprocess;\n        // put an input node on the graph. some browsers require this to run our script processor\n        // this oscillator will not actually be used in any way\n        this.dummy_osc = this.quiet.audioCtx.createOscillator();\n        this.dummy_osc.type = 'square';\n        this.dummy_osc.frequency.value = 420;\n        this.mediaStreamDestination = this.quiet.audioCtx.createMediaStreamDestination()\n        this.stream = this.mediaStreamDestination.stream\n    }\n\n    // 都是阻塞性同步方法，貌似没必要做async\n    transmit(buf: ArrayBuffer){\n        //发送完后返回\n        if (!this.inited) {\n            return;\n        }\n        // slice up into frames and push the frames to a list\n        for (let i = 0; i < buf.byteLength; ) {\n            const frame = buf.slice(i, i + this.frame_len);\n            i += frame.byteLength;\n            this.payload.push(frame);\n        }\n        // now do an update. this may or may not write samples\n        this.writebuf();\n    }\n\n    transmitText(text: string){\n        const ab = str2ab(text)\n        return this.transmit(ab)\n    }\n\n    startTransmitter(){\n        if (!this.inited) {\n            return;\n        }\n        this.inited = true\n\n        this.dummy_osc.connect(this.scriptNode);\n        this.scriptNode.connect(this.mediaStreamDestination);\n        this.running = true;\n    }\n\n    writebuf() {\n        if (!this.inited) {\n            return;\n        }\n        // fill as much of quiet's transmit queue as possible\n        let frame_available = false;\n        let frame_written = false;\n        while(true) {\n            const frame = this.payload.shift();\n            if (!frame) {\n                break;\n            }\n            frame_available = true;\n            const written = Module.ccall('quiet_encoder_send', 'number', ['pointer', 'array', 'number'], [this.encoder, new Uint8Array(frame), frame.byteLength]);\n            if (written === -1) {\n                this.payload.unshift(frame);\n                break;\n            }\n            frame_written = true;\n        }\n\n        if (!this.payload.length && frame_written) {\n            // we wrote at least one frame and emptied out payload, our local (js) tx queue\n            // this means we have transitioned to having all data in libquiet\n            // notify user about this if they like\n            // this is an important transition point because it allows user to control\n            // memory util without sacrificing throughput as would be the case for waiting\n            // for onFinish, which is only called after everything has flushed\n            if (this.opts.onEnqueue !== undefined) {\n                window.setTimeout(this.opts.onEnqueue, 0);\n            }\n        }\n\n        if (frame_available && !this.running) {\n            this.startTransmitter();\n        }\n\n        // now set the sample block\n        if (!this.played) {\n            // the existing sample block has yet to be played\n            // we are done\n            return;\n        }\n\n        const before = Date.now();\n        const written = Module.ccall('quiet_encoder_emit', 'number', ['pointer', 'pointer', 'number'], [this.encoder, this.samples, this.quiet.sampleBufferSize]);\n        const after = Date.now();\n\n        this.last_emit_times.unshift(after - before);\n        if (this.last_emit_times.length > this.num_emit_times) {\n            this.last_emit_times.pop();\n        }\n\n        // libquiet notifies us that the payload is finished by\n        // returning written < number of samples we asked for\n        if (!frame_available && written === -1) {\n            if (this.empties_written < 3) {\n                // flush out browser's sound sample buffer before quitting\n                for (let i = 0; i < this.quiet.sampleBufferSize; i++) {\n                    this.sample_view[i] = 0;\n                }\n                this.empties_written++;\n                this.played = false;\n                return;\n            }\n            // looks like we are done\n            // user callback\n            if (this.done !== undefined) {\n                this.done();\n            }\n            if (this.running) {\n                this.stopTransmitter();\n            }\n            return;\n        }\n\n        this.played = false;\n        this.empties_written = 0;\n\n        // in this case, we are sending data, but the whole block isn't full (we're near the end)\n        if (written < this.quiet.sampleBufferSize) {\n            // be extra cautious and 0-fill what's left\n            //   (we want the end of transmission to be silence, not potentially loud noise)\n            for (let i = written; i < this.quiet.sampleBufferSize; i++) {\n                this.sample_view[i] = 0;\n            }\n        }\n    }\n\n    stopTransmitter() {\n        if (!this.inited) {\n            return;\n        }\n        // this.dummy_osc.disconnect(this.scriptNode);\n        // this.scriptNode.disconnect(this.mediaStreamDestination);\n        this.running = false;\n    }\n}\n","import {QuietInitOptions, QuietProfile, ReceiverOptionsInput, TransmitterOptionsInput} from \"./interfaces\";\nimport {Receiver} from \"./Receiver\";\nimport {ab2str} from \"./util\";\nimport {Transmitter} from \"./Transmitter\";\nimport {Module} from \"./Module\";\n\n// 同一个Quiet对象使用同样的AudioContext和wasm实例\nexport class Quiet{\n    emscriptenInitialized = false;\n    inited = false;\n    profiles: {\n        [profileName: string]: QuietProfile\n    } = {}\n    audioCtx: AudioContext\n\n    // these are used for receiver only\n    // audioInput: MediaStreamAudioSourceNode;\n    // audioInputFailedReason:string = \"\";\n    // audioInputReadyCallbacks: ((...any)=> void)[] = [];\n    // audioInputFailedCallbacks: ((...any)=> void)[] = [];\n    frameBufferSize = Math.pow(2, 14);\n\n    // anti-gc\n    receivers: {[idx: number]: ScriptProcessorNode} = {};\n    receivers_idx:number = 0;\n\n    sampleBufferSize = 16384;\n\n    constructor(options?: AudioContextOptions) {\n        if (window.AudioContext){\n            this.audioCtx = new AudioContext(options)\n        }else{\n            // @ts-ignore\n            this.audioCtx = new webkitAudioContext(options)\n        }\n    }\n\n    async init(options: QuietInitOptions){\n        this.profiles = options.profiles\n        this.inited = true\n        this.resume()\n        await InitRuntime()\n    }\n\n    async resume(){\n        if (this.audioCtx.state === \"suspended\"){\n            await this.audioCtx.resume()\n        }\n    }\n\n    async transmitter( transmitOptionsInput: TransmitterOptionsInput){\n        const onEnqueue = transmitOptionsInput.onEnqueue || function(){\n            console.log(\"transmitter.onEnqueue\", ...arguments)\n        }\n\n        const onFinish = transmitOptionsInput.onFinish || function(){\n            console.log(\"transmitter.onFinish\", ...arguments)\n        }\n\n        const profile = this.profiles[transmitOptionsInput.profileName];\n        if (!profile){\n            throw new Error(`Cannot find profile [${transmitOptionsInput.profileName}]. Available profileNames: ${Object.keys(this.profiles).join()}`)\n        }\n\n        const transmitterOptions = {\n            profile,\n            quiet: this,\n            clampFrame: transmitOptionsInput.clampFrame,\n\n            onEnqueue,\n            onFinish,\n        }\n        const transimitter = new Transmitter(transmitterOptions)\n        return transimitter;\n    }\n\n    async receiver(receiverOptionsInput: ReceiverOptionsInput){\n        const audioStream = receiverOptionsInput.audioStream\n            || await navigator.mediaDevices.getUserMedia({\n                audio: {\n                    echoCancellation: false,\n                    noiseSuppression: false,\n                    autoGainControl: false\n                }\n            })\n        const onReceive = receiverOptionsInput.onReceive || function(arrayBuffer){\n            console.log(\"onReceive\", receiverOptionsInput.profileName, ab2str(arrayBuffer))\n        }\n\n        const profile = this.profiles[receiverOptionsInput.profileName];\n        if (!profile){\n            throw new Error(`Cannot find profile [${receiverOptionsInput.profileName}]. Available profileNames: ${Object.keys(this.profiles).join()}`)\n        }\n\n        const receiverOptions = {\n            profile,\n            audioStream,\n            quiet: this,\n            onReceive,\n\n            onReceiveFail: receiverOptionsInput.onReceiveFail,\n            onReceiverStatsUpdate: receiverOptionsInput.onReceiverStatsUpdate,\n        }\n        receiverOptions.quiet = this;\n        const receiver = new Receiver(receiverOptions)\n        return receiver;\n    }\n}\n\nlet initStatus:\"UNINIT\"|\"INITING\"|\"INITED\" = \"UNINIT\"\nconst runtimeInitCallbacks: any[] = [];\n\nasync function InitRuntime(){\n    if (initStatus === \"INITED\"){\n        return\n    }\n    return new Promise((resolve)=>{\n        runtimeInitCallbacks.push(resolve);\n        if (initStatus === \"UNINIT\"){\n            initStatus = \"INITING\"\n            const start = Date.now()\n            const elem = document.createElement('script')\n            elem.async = true\n            elem.src = Module.locateFile('quiet-emscripten.js')\n            document.body.appendChild(elem);\n            Module.onRuntimeInitialized = function(){\n                initStatus = \"INITED\";\n                console.log(\"onRuntimeInitialized\", Date.now() - start);\n                runtimeInitCallbacks.forEach((resolve)=>{\n                    resolve()\n                })\n            }\n        }\n    })\n}\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Module","onRuntimeInitialized","console","log","arguments","locateFile","filename","emPathFolder","window","textEncoder","textDecoder","ab2str","ab","TextDecoder","decode","str2ab","str","TextEncoder","encode","mergeab","ab1","ab2","tmp","Uint8Array","byteLength","set","buffer","Receiver","constructor","opts","inited","samples","lastChecksumFailCount","last_consume_times","num_consume_times","sample_view","Float32Array","idx","this","quiet","profile","c_profiles","intArrayFromString","JSON","stringify","c_profile","opt","ccall","decoder","audioCtx","sampleRate","audioStream","audioInput","createMediaStreamSource","audioDestination","createMediaStreamDestination","scriptProcessor","initScriptProcessor","connect","init","sampleBufferSize","frame","frameBufferSize","undefined","onReceiverStatsUpdate","readbuf","read","frameArray","HEAP8","slice","onReceive","consume","before","Date","now","after","unshift","length","pop","setTimeout","currentChecksumFailCount","onReceiveFail","error","num_frames_ptr","frames","num_frames","HEAPU32","stats","i","symbols","num_symbols","frameStats","errorVectorMagnitude","HEAPF32","receivedSignalStrengthIndicator","j","symbol","push","real","imag","Error","createScriptProcessor","receivers_idx","receivers","onaudioprocess","e","input","inputBuffer","getChannelData","subarray","destroy","disconnect","getAverageDecodeTime","total","Transmitter","running","played","payload","last_emit_times","num_emit_times","empties_written","profileObj","clampFrame","done","onFinish","encoder","frame_len","scriptNode","output_l","outputBuffer","dummy_osc","createOscillator","type","frequency","mediaStreamDestination","stream","transmit","buf","writebuf","transmitText","text","startTransmitter","frame_available","frame_written","shift","onEnqueue","written","stopTransmitter","Quiet","options","emscriptenInitialized","profiles","Math","pow","AudioContext","webkitAudioContext","async","resume","initStatus","Promise","resolve","runtimeInitCallbacks","start","elem","document","createElement","src","body","appendChild","forEach","InitRuntime","state","transmitOptionsInput","profileName","keys","join","transmitterOptions","receiverOptionsInput","navigator","mediaDevices","getUserMedia","audio","echoCancellation","noiseSuppression","autoGainControl","arrayBuffer","receiverOptions"],"sourceRoot":""}